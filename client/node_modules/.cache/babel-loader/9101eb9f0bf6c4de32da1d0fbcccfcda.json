{"remainingRequest":"/Users/haris/Development/counting/client/node_modules/babel-loader/lib/index.js!/Users/haris/Development/counting/client/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/haris/Development/counting/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/haris/Development/counting/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haris/Development/counting/client/src/pages/LiveDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haris/Development/counting/client/src/pages/LiveDetail.vue","mtime":1579251647025},{"path":"/Users/haris/Development/counting/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/haris/Development/counting/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/haris/Development/counting/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/haris/Development/counting/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/haris/Development/counting/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LiveDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-row>\n      <v-col\n        :cols=\"12\"\n        md=\"8\"\n      >\n      <v-alert \n        v-model=\"alert\" \n        type=\"error\"\n        dense\n      >\n        {{ error_text }}\n      </v-alert>\n        <v-card\n          class=\"pa-2\"\n          tile\n          outlined\n        >\n        <!-- <div class=\"pa-2\">\n          <div v-if=\"streamStatus\">\n            <v-img :src=\"videoDefault\"/>\n          </div>\n          <div v-else>\n            <v-img src=\"@/assets/offline.jpg\"/>\n          </div>\n        </div>  -->\n        <vue-load-image>\n          <img slot=\"image\" :src=\"videoDefault\" style=\"width: 100%\"/>\n          <v-img slot=\"preloader\" src=\"@/assets/preloader.gif\"/>\n          <v-img slot=\"error\" src=\"@/assets/offline.jpg\" aspect-ratio=\"1.7\"/>\n        </vue-load-image>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n            <v-chip\n              class=\"ma-2\"\n              color=\"blue\"\n              outlined\n            >\n              <v-avatar left>\n                <v-icon>mdi-car</v-icon>\n              </v-avatar>\n              Mobil : {{ mobil_in + ' | ' + mobil_out}}\n            </v-chip>\n\n            <v-chip\n              class=\"ma-2\"\n              color=\"green\"\n              outlined\n            >\n              <v-avatar left>\n                <v-icon>mdi-motorbike</v-icon>\n              </v-avatar>\n              Motor : {{ motor_up + ' | ' + motor_down}}\n            </v-chip>\n\n            <v-chip\n              class=\"ma-2\"\n              color=\"orange\"\n              outlined\n            >\n              <v-avatar left>\n                <v-icon>mdi-truck</v-icon>\n              </v-avatar>\n              Truck : {{ truck_up + ' | ' + truck_down}}\n            </v-chip>\n\n            <v-chip\n              class=\"ma-2\"\n              color=\"red\"\n              outlined\n            >\n              <v-avatar left>\n                <v-icon>mdi-bus</v-icon>\n              </v-avatar>\n              Bus : {{ bus_up + ' | ' + bus_down }}\n            </v-chip>\n            <v-spacer></v-spacer>\n            <v-tooltip top>\n                <template v-slot:activator=\"{ on }\">\n                    <v-btn color=\"green\" v-on=\"on\" fab small dark @click=\"checkConnection(port)\">\n                      <v-icon>mdi-refresh</v-icon>\n                    </v-btn>\n                </template>\n                <span>Refresh Video</span>\n            </v-tooltip>\n        </v-card-actions>\n        </v-card>\n      </v-col>\n\n      <v-col\n        :cols=\"12\"\n        md=\"4\"\n      >\n         <v-card\n          class=\"pa-2\"\n          height=\"430\"\n          tile\n          outlined\n        >\n        <v-select\n            v-model=\"cameras\"\n            :items=\"camera_list\"\n            item-value=\"id\"\n            item-text=\"name\"\n            @change=\"changeRoute\"\n            filled\n            dense\n            label=\"Camera Active\"\n          ></v-select>\n          <div v-if=\"chartHide\">\n            <v-img src=\"@/assets/no_result.gif\"></v-img>\n          </div>\n          <div v-else>\n            <v-list-item-content>\n              <div class=\"overline\">Percentage</div>\n            </v-list-item-content>\n            <v-layout justify-center>\n              <apexchart type=pie width=\"350\" :options=\"chartOptionsPie\" :series=\"seriesPie\" />\n            </v-layout>\n            <div class=\"text-center mt-4\">\n              <v-btn-toggle\n                v-model=\"id_lane\"\n                rounded\n                dense\n              >\n                <v-btn value=\"In\" @click=\"id_lane = 'In'\">\n                  <v-icon>mdi-arrow-up-circle</v-icon>\n                </v-btn>\n                <v-btn value=\"all\" @click=\"id_lane = 'all'\">\n                  <v-icon>mdi-swap-vertical-bold</v-icon>\n                </v-btn>\n                <v-btn value=\"Out\" @click=\"id_lane = 'Out'\">\n                  <v-icon>mdi-arrow-down-circle</v-icon>\n                </v-btn>\n              </v-btn-toggle>\n            </div>\n          </div>\n        </v-card>\n      </v-col>\n      \n      <v-col\n        cols=\"12\"\n      >\n        <v-card\n          class=\"pa-2 justify-center\"\n          outlined\n          tile\n        >\n          <div v-if=\"chartHide\">\n            <v-layout justify-center>\n                <v-img src=\"@/assets/no_result.gif\" max-width=\"500\"></v-img>\n            </v-layout>\n          </div>\n          <div v-else>\n            <v-list-item-content>\n              <div class=\"overline\">Traffic Today</div>\n            </v-list-item-content>\n            <apexchart type=line height=\"400\" :options=\"chartOptions\" :series=\"series\" />\n          </div>\n        </v-card>\n      </v-col>\n     \n      <v-snackbar\n        v-model=\"snackbar\"\n        :timeout=\"timeout\"\n        :color=\"color_snackbar\"\n      >\n        {{ text }}\n        <v-btn\n          color=\"white\"\n          text\n          @click=\"snackbar = false\"\n        >\n          Close\n        </v-btn>\n      </v-snackbar>\n    </v-row>\n</template>\n\n<script>\nimport VueApexCharts from 'vue-apexcharts'\nimport moment from 'moment'\nimport VueLoadImage from 'vue-load-image'\n\n  export default {\n    components: { apexchart: VueApexCharts, 'vue-load-image': VueLoadImage },\n    props: {\n      source: String,\n    },\n    data: () => ({\n        snackbar: false,\n        text: '',\n        timeout: 3000,\n        color_snackbar: '',\n\n        alert : false,\n        error_text: '',\n\n        id_camera : '',\n        id_lane : 'all',\n        port: '',\n        cameras:[],\n        camera_list:[],\n        videoDefault: \"@/assets/loading.gif\",\n        start_date: moment().tz('Asia/Jakarta').startOf('day').format('YYYY-MM-DD'),\n        end_date: moment().tz('Asia/Jakarta').endOf('day').format('YYYY-MM-DD'),\n        chartHide : false,\n        no_result: '@/assets/offline.jpg',\n        interval_select: {\n          'interval_id' : \"1h\",\n        },\n        interval: [\n          {\n            'interval_id' : \"1h\",\n            'interval_name' : \"1 Hours\",\n          },\n          {\n            'interval_id' : \"3h\",\n            'interval_name' : \"3 Hours\",\n          },\n          {\n            'interval_id' : \"1d\",\n            'interval_name' : \"1 Day\",\n          },\n          {\n            'interval_id' : \"1w\",\n            'interval_name' : \"1 Week\",\n          },\n        ],\n\n        realtime: true,\n        seriesPie: [],\n        chartOptionsPie: {\n          labels: [],\n          chart: {\n            width: '100%'\n          },\n          legend: {\n                position: 'bottom'\n          },\n          responsive: [{\n            breakpoint: 480,\n            options: {\n              chart: {\n                width: '100%'\n              },\n              legend: {\n                position: 'bottom'\n              }\n            }\n          }]\n        },\n\n        series: [\n          {\n            'name' : 'mobil',\n            'data' : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n          },\n          {\n            'name' : 'motor',\n            'data' : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n          },\n          {\n            'name' : 'truck',\n            'data' : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n          },\n          {\n            'name' : 'bus',\n            'data' : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n          }\n        ],\n        chartOptions: {\n          chart: {\n            shadow: {\n              enabled: true,\n              color: '#000',\n              top: 18,\n              left: 7,\n              blur: 10,\n              opacity: 1\n            },\n            toolbar: {\n              show: true\n            }\n          },\n\n          colors: ['rgb(0,134,251)', 'rgb(0,227,150)', 'rgb(254,176,25)', 'rgb(255,69,96)'],\n          dataLabels: {\n            enabled: true,\n          },\n          stroke: {\n            curve: 'smooth'\n          },\n          title: {\n            text: 'Live traffic',\n            align: 'left'\n          },\n          grid: {\n            borderColor: '#e7e7e7',\n            row: {\n              colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n              opacity: 0.5\n            },\n          },\n          markers: {\n            size: 6\n          },\n          xaxis: {\n            categories: ['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00','08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00'],\n            title: {\n              text: 'Time'\n            },\n            labels: {\n              rotate: -45\n            },\n          },\n          yaxis: {\n            title: {\n              text: 'Count'\n            },\n          },\n          legend: {\n            position: 'top',\n            horizontalAlign: 'right',\n            floating: true,\n            offsetY: -25,\n            offsetX: -5\n          }\n        },\n\n        mobil_in : 0,\n        mobil_out : 0,\n\n        motor_up : 0,\n        motor_down : 0,\n\n        truck_up : 0,\n        truck_down : 0,\n        \n        bus_up : 0,\n        bus_down : 0,\n\n        timer: '',\n        timer_live: '',\n        streamStatus: false,\n        hours : ['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00','08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']\n    }),\n\n    created () {\n      this.$Progress.start()\n      this.id_camera = this.$route.params.id\n      this.initialize()      \n    },\n    mounted(){\n      this.$Progress.finish()\n    },\n\n    watch: {\n        id_camera:function() {\n          this.$socket.emit('join', this.$route.params.id);\n          this.getData(this.$route.params.id)\n          this.traffic()\n          this.pie()\n          this.getLiveCount()\n        },\n\n        id_lane:function(){\n          window.console.log(this.id_lane)\n          this.pie()\n          this.traffic()\n        },\n        \n        realtime:function() {\n          if (this.realtime) {\n            this.startIntervalGraph()\n          }else{\n            clearInterval(this.timer)\n          }\n        }\n    },\n\n    methods: {\n        async initialize () {\n          const { data } = await this.$http.get(process.env.VUE_APP_IP_SERVER + '/camera?system=counting')\n          this.camera_list = data\n        },\n\n        async getData(id_camera){\n          try {\n              const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + '/camera/' + id_camera)\n              this.cameras = data\n              this.port = data['port']\n              this.checkConnection(this.port)\n            } catch (error) {\n                window.console.log(Object.keys(error), error.message);\n            }\n        },\n\n        async traffic(){\n          var hours = ['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00','08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']\n          try {\n            const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + '/trend/'+ this.$route.params.id +'?start_date=&end_date=&interval=' + this.interval_select.interval_id + '&lane=' + this.id_lane)\n            // const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + 'trend/'+ this.$route.params.id +'?start_date=2019-12-13&end_date=2019-12-13&interval=' + this.interval_select.interval_id + '&lane=' + this.id_lane)\n            data.datasets.forEach((value, index) => {\n              Object.keys(value.data).forEach((hour) => {\n                var index_hour = hours.indexOf(hour);\n                this.series[index]['data'][index_hour] = value.data[hour]\n              });\n            });\n            this.chartOptions = {\n              xaxis : {\n                labels: {\n                  rotate: -45\n                },\n              }\n            }\n            this.alert = false\n          } catch (error) {\n            this.error_text = \"Can't connect database !\"\n            this.alert = true\n          }\n        },\n\n        async pie(){\n          try {\n            const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + '/pie/'+ this.$route.params.id +'?start_date=&end_date=&lane=' + this.id_lane)\n            // const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + 'pie/'+ this.$route.params.id +'?start_date=2019-01-10&end_date=2019-12-13&lane=' + this.id_lane)\n            this.seriesPie = data.datasets\n            this.chartOptionsPie = {\n              labels : data.categories,\n              legend: {\n                position: 'bottom'\n              },\n              responsive: [{\n                breakpoint: 950,\n                options: {\n                  chart: {\n                    width: '350'\n                  },\n                  legend: {\n                    position: 'bottom'\n                  }\n                }\n              }]\n            }\n            if (data.datasets.length == 0) {\n              this.chartHide = true\n            }else{\n              this.chartHide = false\n            }\n          } catch (error) {\n            window.console.log(error)\n          }\n        },\n\n        async getLiveCount(){\n          try {\n            const { data } = await this.axios.get(process.env.VUE_APP_IP_SERVER + 'realtime/count/' + this.id_camera)\n            this.mobil_in = data.mobil[0]\n            this.mobil_out = data.mobil[1]\n            this.motor_up = data.motor[0]\n            this.motor_down = data.motor[1]\n            this.truck_up = data.truck[0]\n            this.truck_down = data.truck[1]\n            this.bus_up = data.bus[0]\n            this.bus_down = data.bus[1]\n          } catch (error) {\n            this.text = \"Live count error ( \"  + error + \" )\"\n            this.color_snackbar = \"red darken-1\"\n            this.alert = true\n            this.chartHide = true\n          }\n        },\n\n        changeRoute(e){\n          this.$socket.emit('leave', this.$route.params.id);\n          this.$router.push({path: '/live/' + e })\n          this.id_camera = this.$route.params.id\n        },\n\n        dateFilter(){\n          window.console.log(this.id_lane)\n          this.traffic()\n          this.pie()\n        },\n\n        startIntervalGraph: function () {\n          this.timer = setInterval(() => {\n            this.traffic()\n            this.pie()\n          }, 3000);\n        },\n\n        checkConnection(port){\n          const _self = this\n          this.axios.get(process.env.VUE_APP_IP_SERVER_WITHOUT_PORT + ':' + port).then(function(){\n            _self.videoStream()\n          }).catch(function(error){\n              if (!error.response) {\n                window.console.log(error)\n                _self.streamStatus = false\n                _self.imageLoadError()\n                _self.text = \"Can't connect video stream !\"\n                _self.color_snackbar = \"red darken-1\"\n              } else {\n                const code = error.response.status\n                const response = error.response.data\n                _self.text = \"Can't connect video stream ! (\" + code + \") response: \" +  response\n                _self.color_snackbar = \"yellow darken-1\"\n              }\n              _self.snackbar = true\n          });\n        },\n\n        videoStream(){\n            let random = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n            this.videoDefault = process.env.VUE_APP_IP_SERVER_WITHOUT_PORT + \":\" + this.port + \"/\" + random + \"/stream.mjpg\"\n        },\n\n        imageLoadError(){\n            this.videoDefault = require('@/assets/offline.jpg')\n        },\n\n        addCount(data){\n          const now = moment().tz('Asia/Jakarta').format('HH:00')\n          let index_hour = this.hours.indexOf(now);\n          window.console.log(index_hour)\n          switch (data.categories) {\n            case 'mobil':\n              if (data.lane == 'In') {\n                this.mobil_in += 1\n              }else{\n                this.mobil_out += 1\n              }\n              this.series[0]['data'][index_hour] = this.series[0]['data'][index_hour]+1\n              this.reloadChartTrend()\n              break;\n            case 'motor':\n              if (data.lane == 'In') {\n                this.motor_up += 1\n              }else{\n                this.motor_down += 1\n              }\n              this.series[1]['data'][index_hour] = this.series[1]['data'][index_hour]+1\n              this.reloadChartTrend()\n              break;\n            case 'truck':\n              if (data.lane == 'In') {\n                this.truck_up += 1\n              }else{\n                this.truck_down += 1\n              }\n              this.series[2]['data'][index_hour] = this.series[2]['data'][index_hour]+1\n              this.reloadChartTrend()\n              break;\n            case 'bus':\n              if (data.lane == 'In') {\n                this.bus_up += 1\n              }else{\n                this.bus_down += 1\n              }\n              this.series[2]['data'][index_hour] = this.series[2]['data'][index_hour]+1\n              this.reloadChartTrend()\n              break;\n            default:\n              break;\n          }\n        },\n\n        reloadChartTrend (){\n          this.chartOptions = {\n              xaxis : {\n                labels: {\n                  rotate: -45\n                },\n              }\n            }\n        }\n    },\n\n    sockets: {\n      connect: function (){\n          window.console.log('socket connected')\n      },\n      counting_live: function (data) {\n          this.addCount(data)\n      }\n    },\n\n    beforeDestroy: function() {\n        this.$socket.emit('leave', this.$route.params.id);\n        this.videoDefault = require('@/assets/offline.jpg')\n        clearInterval(this.timer)\n    },\n\n  }\n</script>\n"],"sourceRoot":"src/pages"}]}